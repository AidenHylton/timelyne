// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6vWNYa83fUnb1xHLwQwj6w
// Component: -_EzUKxm9F
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import TextInput from "../../TextInput" // plasmic-import: T-Lluoe_WDP/component
import Button from "../../Button" // plasmic-import: Rnk6lkY_vgm/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_timelyne.module.css" // plasmic-import: 6vWNYa83fUnb1xHLwQwj6w/projectcss
import * as sty from "./PlasmicSignup.module.css" // plasmic-import: -_EzUKxm9F/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3" // plasmic-import: ZLCjyf-arm9/icon
import untitledDesignjpgD3DsclcwO from "./images/untitledDesignjpg.jpeg" // plasmic-import: D3DsclcwO/picture

export const PlasmicSignup__VariantProps = new Array()

export const PlasmicSignup__ArgProps = new Array()

function PlasmicSignup__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  const $props = props.args
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__imRmJ)}>
            <div className={classNames(projectcss.all, sty.freeBox__gu4Hx)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3LU5K)}
              />
            </div>
          </div>

          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div
              data-plasmic-name={"mainSection2"}
              data-plasmic-override={overrides.mainSection2}
              className={classNames(projectcss.all, sty.mainSection2)}
            >
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div
                  data-plasmic-name={"column"}
                  data-plasmic-override={overrides.column}
                  className={classNames(projectcss.all, sty.column)}
                >
                  <div
                    data-plasmic-name={"container4"}
                    data-plasmic-override={overrides.container4}
                    className={classNames(projectcss.all, sty.container4)}
                  >
                    <p.PlasmicImg
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"85px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"99px"}
                      loading={"lazy"}
                      src={{
                        src: untitledDesignjpgD3DsclcwO,
                        fullWidth: 500,
                        fullHeight: 500,
                        aspectRatio: undefined,
                      }}
                    />

                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Register"}
                    </h2>

                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label__emoPd
                      )}
                    >
                      {"Full name"}
                    </label>

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__r047J
                      )}
                      placeholder={" "}
                    />

                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label__yds6P
                      )}
                    >
                      {"Email"}
                    </label>

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__v9VSx
                      )}
                      placeholder={" "}
                    />

                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label__kKfLv
                      )}
                    >
                      {"password"}
                    </label>

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__y6Rwi
                      )}
                      placeholder={" "}
                    />

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__kGxtl
                      )}
                      placeholder={" "}
                    />

                    <p.Stack
                      as={p.PlasmicLink}
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link
                      )}
                      component={Link}
                      platform={"gatsby"}
                    >
                      {false ? (
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__jGxMi)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"sign up"}
                      </div>

                      {false ? (
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__zgzAx)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      link={"/"}
                    >
                      {"cancel"}
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainSection",
    "mainSection2",
    "columns",
    "column",
    "container4",
    "img",
    "h2",
    "link",
    "text",
    "button",
  ],

  mainSection: [
    "mainSection",
    "mainSection2",
    "columns",
    "column",
    "container4",
    "img",
    "h2",
    "link",
    "text",
    "button",
  ],

  mainSection2: [
    "mainSection2",
    "columns",
    "column",
    "container4",
    "img",
    "h2",
    "link",
    "text",
    "button",
  ],

  columns: [
    "columns",
    "column",
    "container4",
    "img",
    "h2",
    "link",
    "text",
    "button",
  ],

  column: ["column", "container4", "img", "h2", "link", "text", "button"],
  container4: ["container4", "img", "h2", "link", "text", "button"],
  img: ["img"],
  h2: ["h2"],
  link: ["link", "text"],
  text: ["text"],
  button: ["button"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSignup__ArgProps,
      internalVariantPropNames: PlasmicSignup__VariantProps,
    })

    return PlasmicSignup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicSignup"
  } else {
    func.displayName = `PlasmicSignup.${nodeName}`
  }
  return func
}

export const PlasmicSignup = Object.assign(
  // Top-level PlasmicSignup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mainSection: makeNodeComponent("mainSection"),
    mainSection2: makeNodeComponent("mainSection2"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    container4: makeNodeComponent("container4"),
    img: makeNodeComponent("img"),
    h2: makeNodeComponent("h2"),
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicSignup
    internalVariantProps: PlasmicSignup__VariantProps,
    internalArgProps: PlasmicSignup__ArgProps,
  }
)

export default PlasmicSignup
/* prettier-ignore-end */
