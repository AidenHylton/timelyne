{"version":3,"file":"component---src-pages-settings-jsx-b6061b46e55344a57081.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/plasmic/timelyne/PlasmicSwitch.module.css","webpack://gatsby-starter-default/./src/components/plasmic/timelyne/PlasmicSwitch.jsx","webpack://gatsby-starter-default/./src/components/Switch.jsx","webpack://gatsby-starter-default/./src/components/plasmic/timelyne/PlasmicSettings.jsx","webpack://gatsby-starter-default/./src/components/plasmic/timelyne/PlasmicSettings.module.css","webpack://gatsby-starter-default/./src/pages/settings.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var __wab_slot = \"PlasmicSwitch-module--__wab_slot--fa8S2\";\nexport var __wab_slotStringWrapper = \"PlasmicSwitch-module--__wab_slot-string-wrapper--7OPw+\";\nexport var __wab_text = \"PlasmicSwitch-module--__wab_text--jG4d2\";\nexport var labelContainer = \"PlasmicSwitch-module--labelContainer--OVIgi\";\nexport var labelContainer___focusVisibleWithin = \"PlasmicSwitch-module--labelContainer___focusVisibleWithin--KBdC0\";\nexport var root = \"PlasmicSwitch-module--root--1I4wE\";\nexport var root___focusVisibleWithin = \"PlasmicSwitch-module--root___focusVisibleWithin--dvBbF\";\nexport var rootisChecked = \"PlasmicSwitch-module--rootisChecked--BttsP\";\nexport var slotTargetChildren = \"PlasmicSwitch-module--slotTargetChildren--BUjUP\";\nexport var slotTargetChildren___focusVisibleWithin = \"PlasmicSwitch-module--slotTargetChildren___focusVisibleWithin--4HxSA\";\nexport var thumb = \"PlasmicSwitch-module--thumb--6wI56\";\nexport var thumb___focusVisibleWithin = \"PlasmicSwitch-module--thumb___focusVisibleWithin--07G2J\";\nexport var thumbisChecked = \"PlasmicSwitch-module--thumbisChecked--rfesl\";\nexport var toggle = \"PlasmicSwitch-module--toggle--86N8g\";\nexport var toggle___focusVisibleWithin = \"PlasmicSwitch-module--toggle___focusVisibleWithin--weX9P\";\nexport var track = \"PlasmicSwitch-module--track--b4zvh\";\nexport var track___focusVisibleWithin = \"PlasmicSwitch-module--track___focusVisibleWithin--VK4WA\";\nexport var trackisChecked = \"PlasmicSwitch-module--trackisChecked--toJ-V\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: 6vWNYa83fUnb1xHLwQwj6w\n// Component: aMBO0vTjkqh\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport * as pp from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  createPlasmicElementProxy,\n  useTrigger,\n  deriveRenderOpts,\n} from \"@plasmicapp/react-web\"\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_timelyne.module.css\" // plasmic-import: 6vWNYa83fUnb1xHLwQwj6w/projectcss\nimport * as sty from \"./PlasmicSwitch.module.css\" // plasmic-import: aMBO0vTjkqh/css\n\nexport const PlasmicSwitch__VariantProps = new Array(\n  \"noLabel\",\n  \"isDisabled\",\n  \"isChecked\"\n)\n\nexport const PlasmicSwitch__ArgProps = new Array(\n  \"children\",\n  \"name\",\n  \"value\",\n  \"aria-label\",\n  \"aria-labelledby\"\n)\n\nfunction PlasmicSwitch__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const $props = props.args\n  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =\n    useTrigger(\"useFocusVisibleWithin\", {\n      isTextInput: false,\n    })\n\n  const triggers = {\n    focusVisibleWithin_root: isRootFocusVisibleWithin,\n  }\n\n  return (\n    <div\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\n        projectcss.all,\n        projectcss.root_reset,\n        projectcss.plasmic_default_styles,\n        projectcss.plasmic_mixins,\n        projectcss.plasmic_tokens,\n        sty.root,\n        {\n          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n          [sty.rootisChecked]: hasVariant(variants, \"isChecked\", \"isChecked\"),\n          [sty.rootisDisabled]: hasVariant(\n            variants,\n            \"isDisabled\",\n            \"isDisabled\"\n          ),\n\n          [sty.rootnoLabel]: hasVariant(variants, \"noLabel\", \"noLabel\"),\n        }\n      )}\n      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}\n    >\n      <div\n        data-plasmic-name={\"toggle\"}\n        data-plasmic-override={overrides.toggle}\n        className={classNames(projectcss.all, sty.toggle, {\n          [sty.toggle___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n          [sty.toggleisChecked]: hasVariant(variants, \"isChecked\", \"isChecked\"),\n          [sty.toggleisDisabled]: hasVariant(\n            variants,\n            \"isDisabled\",\n            \"isDisabled\"\n          ),\n        })}\n      >\n        <div\n          data-plasmic-name={\"track\"}\n          data-plasmic-override={overrides.track}\n          className={classNames(projectcss.all, sty.track, {\n            [sty.track___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n            [sty.trackisChecked]: hasVariant(\n              variants,\n              \"isChecked\",\n              \"isChecked\"\n            ),\n\n            [sty.trackisDisabled]: hasVariant(\n              variants,\n              \"isDisabled\",\n              \"isDisabled\"\n            ),\n          })}\n        />\n\n        <div\n          data-plasmic-name={\"thumb\"}\n          data-plasmic-override={overrides.thumb}\n          className={classNames(projectcss.all, sty.thumb, {\n            [sty.thumb___focusVisibleWithin]: triggers.focusVisibleWithin_root,\n            [sty.thumbisChecked]: hasVariant(\n              variants,\n              \"isChecked\",\n              \"isChecked\"\n            ),\n          })}\n        />\n      </div>\n\n      {(hasVariant(variants, \"noLabel\", \"noLabel\") ? false : true) ? (\n        <div\n          data-plasmic-name={\"labelContainer\"}\n          data-plasmic-override={overrides.labelContainer}\n          className={classNames(projectcss.all, sty.labelContainer, {\n            [sty.labelContainer___focusVisibleWithin]:\n              triggers.focusVisibleWithin_root,\n            [sty.labelContainernoLabel]: hasVariant(\n              variants,\n              \"noLabel\",\n              \"noLabel\"\n            ),\n          })}\n        >\n          {p.renderPlasmicSlot({\n            defaultContents: \"Switch me\",\n            value: args.children,\n            className: classNames(sty.slotTargetChildren, {\n              [sty.slotTargetChildren___focusVisibleWithin]:\n                triggers.focusVisibleWithin_root,\n              [sty.slotTargetChildrenisChecked]: hasVariant(\n                variants,\n                \"isChecked\",\n                \"isChecked\"\n              ),\n\n              [sty.slotTargetChildrennoLabel]: hasVariant(\n                variants,\n                \"noLabel\",\n                \"noLabel\"\n              ),\n            }),\n          })}\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nfunction useBehavior(props, ref) {\n  if (!(\"children\" in props)) {\n    props = {\n      ...props,\n      children: \"Switch me\",\n    }\n  }\n  return pp.useSwitch(\n    PlasmicSwitch,\n    props,\n    {\n      isCheckedVariant: { group: \"isChecked\", variant: \"isChecked\" },\n      isDisabledVariant: { group: \"isDisabled\", variant: \"isDisabled\" },\n      noLabelVariant: { group: \"noLabel\", variant: \"noLabel\" },\n      labelSlot: \"children\",\n      root: \"root\",\n    },\n\n    ref\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"toggle\", \"track\", \"thumb\", \"labelContainer\"],\n  toggle: [\"toggle\", \"track\", \"thumb\"],\n  track: [\"track\"],\n  thumb: [\"thumb\"],\n  labelContainer: [\"labelContainer\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicSwitch__ArgProps,\n      internalVariantPropNames: PlasmicSwitch__VariantProps,\n    })\n\n    return PlasmicSwitch__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicSwitch\"\n  } else {\n    func.displayName = `PlasmicSwitch.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicSwitch = Object.assign(\n  // Top-level PlasmicSwitch renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    toggle: makeNodeComponent(\"toggle\"),\n    track: makeNodeComponent(\"track\"),\n    thumb: makeNodeComponent(\"thumb\"),\n    labelContainer: makeNodeComponent(\"labelContainer\"),\n    // Metadata about props expected for PlasmicSwitch\n    internalVariantProps: PlasmicSwitch__VariantProps,\n    internalArgProps: PlasmicSwitch__ArgProps,\n    useBehavior,\n  }\n)\n\nexport default PlasmicSwitch\n/* prettier-ignore-end */\n","import * as React from \"react\"\nimport { PlasmicSwitch } from \"./plasmic/timelyne/PlasmicSwitch\"\n\nfunction Switch_(props, ref) {\n  const { plasmicProps, state } = PlasmicSwitch.useBehavior(props, ref)\n  return <PlasmicSwitch {...plasmicProps} />\n}\n\nconst Switch = React.forwardRef(Switch_)\n\nexport default Object.assign(Switch, {\n  __plumeType: \"switch\",\n})\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: 6vWNYa83fUnb1xHLwQwj6w\n// Component: 5qSewSMVf0\nimport * as React from \"react\"\nimport {\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n} from \"@plasmicapp/react-web\"\nimport Tilt from \"@plasmicpkgs/react-parallax-tilt\" // plasmic-import: PfY466VIuq/codeComponent\nimport Switch from \"../../Switch\" // plasmic-import: aMBO0vTjkqh/component\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_timelyne.module.css\" // plasmic-import: 6vWNYa83fUnb1xHLwQwj6w/projectcss\nimport * as sty from \"./PlasmicSettings.module.css\" // plasmic-import: 5qSewSMVf0/css\nimport ReshotIconSettingsWryhdvpgjQsvgIcon from \"./icons/PlasmicIcon__ReshotIconSettingsWryhdvpgjQsvg\" // plasmic-import: W5Fg7djZ3c/icon\n\nexport const PlasmicSettings__VariantProps = new Array()\n\nexport const PlasmicSettings__ArgProps = new Array()\n\nfunction PlasmicSettings__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const $props = props.args\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <div\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_mixins,\n            projectcss.plasmic_tokens,\n            sty.root\n          )}\n        >\n          <ReshotIconSettingsWryhdvpgjQsvgIcon\n            data-plasmic-name={\"svg\"}\n            data-plasmic-override={overrides.svg}\n            className={classNames(projectcss.all, sty.svg)}\n            role={\"img\"}\n          />\n\n          <Tilt className={classNames(\"__wab_instance\", sty.tilt__u3Ori)}>\n            <Switch\n              className={classNames(\"__wab_instance\", sty._switch__tRnj6)}\n            >\n              {\"private timelyne\"}\n            </Switch>\n          </Tilt>\n\n          <Tilt className={classNames(\"__wab_instance\", sty.tilt__v2Rrm)}>\n            <Switch\n              className={classNames(\"__wab_instance\", sty._switch__kqCPd)}\n            >\n              {\"hide account on search\"}\n            </Switch>\n          </Tilt>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"svg\"],\n  svg: [\"svg\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicSettings__ArgProps,\n      internalVariantPropNames: PlasmicSettings__VariantProps,\n    })\n\n    return PlasmicSettings__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicSettings\"\n  } else {\n    func.displayName = `PlasmicSettings.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicSettings = Object.assign(\n  // Top-level PlasmicSettings renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    svg: makeNodeComponent(\"svg\"),\n    // Metadata about props expected for PlasmicSettings\n    internalVariantProps: PlasmicSettings__VariantProps,\n    internalArgProps: PlasmicSettings__ArgProps,\n  }\n)\n\nexport default PlasmicSettings\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var _switch__kqCPd = \"PlasmicSettings-module--_switch__kqCPd--5t7kO\";\nexport var _switch__tRnj6 = \"PlasmicSettings-module--_switch__tRnj6--wCRBI\";\nexport var root = \"PlasmicSettings-module--root--lpFRk\";\nexport var svg = \"PlasmicSettings-module--svg--+OUg+\";\nexport var tilt__u3Ori = \"PlasmicSettings-module--tilt__u3Ori--Zy0rb\";\nexport var tilt__v2Rrm = \"PlasmicSettings-module--tilt__v2Rrm--+CIK+\";","// This is a skeleton starter React page generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport GlobalContextsProvider from \"../components/plasmic/timelyne/PlasmicGlobalContextsProvider\"\nimport { PlasmicSettings } from \"../components/plasmic/timelyne/PlasmicSettings\"\n\nfunction Settings() {\n  // Use PlasmicSettings to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicSettings are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, PlasmicSettings is wrapped by your project's global\n  // variant context providers. These wrappers may be moved to\n  // Gatsby \"wrapRootElement\" function\n  // (https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr#wrapRootElement).\n  return (\n    <GlobalContextsProvider>\n      <PlasmicSettings />\n    </GlobalContextsProvider>\n  )\n}\n\nexport default Settings\n"],"names":["labelContainer","labelContainer___focusVisibleWithin","root","root___focusVisibleWithin","rootisChecked","slotTargetChildren","slotTargetChildren___focusVisibleWithin","thumb","thumb___focusVisibleWithin","thumbisChecked","toggle","toggle___focusVisibleWithin","track","track___focusVisibleWithin","trackisChecked","PlasmicSwitch__VariantProps","Array","PlasmicSwitch__ArgProps","PlasmicDescendants","makeNodeComponent","nodeName","func","props","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","useTrigger","isTextInput","isRootFocusVisibleWithin","triggerRootFocusVisibleWithinProps","triggers","focusVisibleWithin_root","className","classNames","projectcss","sty","hasVariant","p","defaultContents","value","children","PlasmicSwitch__RenderFunc","displayName","PlasmicSwitch","Object","assign","internalVariantProps","internalArgProps","useBehavior","ref","pp","isCheckedVariant","group","variant","isDisabledVariant","noLabelVariant","labelSlot","Switch_","plasmicProps","state","Switch","React","__plumeType","PlasmicSettings__VariantProps","PlasmicSettings__ArgProps","svg","role","PlasmicSettings__RenderFunc","PlasmicSettings"],"sourceRoot":""}