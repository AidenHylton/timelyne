{"version":3,"file":"component---src-pages-my-timelyne-jsx-fc559b0e5befa0c48855.js","mappings":"qQAuBaA,EAAkC,IAAIC,MAEtCC,EAA8B,IAAID,MA4D/C,IAAME,EAAqB,CACzBC,KAAM,CAAC,OAAQ,OAAQ,SAAU,OACjCC,KAAM,CAAC,OAAQ,SAAU,OACzBC,OAAQ,CAAC,SAAU,OACnBC,IAAK,CAAC,QAGR,SAASC,EAAkBC,GACzB,IAAMC,EAAO,SAAUC,GACrB,OAAsCC,EAAAA,EAAAA,IAAiBD,EAAO,CAC5DE,KAAMJ,EACNK,iBAAgB,OAAKX,EAAmBM,IACxCM,qBAAsBb,EACtBc,yBAA0BhB,IAG5B,OA1EJ,SAAuCW,GACUA,EAAvCM,SAAuCN,EAA7BO,KAAlB,IAAwBC,EAAuBR,EAAvBQ,UAAWC,EAAYT,EAAZS,QAEnC,OADeT,EAAMO,MAEnB,QAAC,WAAD,MACE,mFAMA,eAAKG,UAAWC,EAAAA,KACd,eACE,oBAAmB,OACnB,wBAAuBH,EAAUf,KACjC,qBAAmB,EACnB,wBAAuBgB,EACvBC,WAAWE,EAAAA,EAAAA,IACTD,EAAAA,GACAA,EAAAA,GACAA,EAAAA,EACAA,EAAAA,eACAA,EAAAA,GC/CM,2CDmDR,QAAC,IAAD,CACE,oBAAmB,OACnB,wBAAuBH,EAAUd,KACjCgB,WAAWE,EAAAA,EAAAA,IAAW,iBClDhB,yCDmDNC,WAAW,EACXC,eAAe,EACfC,gBAAiB,MAGf,QAACC,EAAA,EAAD,CACE,oBAAmB,SACnB,wBAAuBR,EAAUb,OACjCe,WAAWE,EAAAA,EAAAA,IAAW,iBChElB,2CDiEJK,MAAO,OACPC,KAAM,YACNC,KAAM,YAEN,QAAC,IAAD,CACE,oBAAmB,MACnB,wBAAuBX,EAAUZ,IACjCc,WAAWE,EAAAA,EAAAA,IAAWD,EAAAA,GCtEvB,wCDuECS,KAAM,aA2BbC,CAA8B,CACnCf,SARF,EAAQA,SASNC,KATF,EAAkBA,KAUhBC,UAVF,EAAwBA,UAWtBC,QAASX,KAQb,OAJEC,EAAKuB,YADU,SAAbxB,EACiB,oBAEnB,qBAAwCA,EAEnCC,EAGF,IAAMwB,EAAoBC,OAAOC,OAEtC5B,EAAkB,QAClB,CAEEH,KAAMG,EAAkB,QACxBF,OAAQE,EAAkB,UAC1BD,IAAKC,EAAkB,OAEvB6B,qBAAsBrC,EACtBsC,iBAAkBpC,IEhGtB,MAxBA,WAiBE,OACE,gBAAC,IAAD,KACE,gBAACgC,EAAD","sources":["webpack://gatsby-starter-default/./src/components/plasmic/timelyne/PlasmicMyTimelyne.jsx","webpack://gatsby-starter-default/./src/components/plasmic/timelyne/PlasmicMyTimelyne.module.css","webpack://gatsby-starter-default/./src/pages/my-timelyne.jsx"],"sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: 6vWNYa83fUnb1xHLwQwj6w\n// Component: sZ5tR8uREH\nimport * as React from \"react\"\nimport {\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n} from \"@plasmicapp/react-web\"\nimport Tilt from \"@plasmicpkgs/react-parallax-tilt\" // plasmic-import: PfY466VIuq/codeComponent\nimport Button from \"../../Button\" // plasmic-import: Rnk6lkY_vgm/component\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_timelyne.module.css\" // plasmic-import: 6vWNYa83fUnb1xHLwQwj6w/projectcss\nimport * as sty from \"./PlasmicMyTimelyne.module.css\" // plasmic-import: sZ5tR8uREH/css\nimport ReshotIconSettingsWryhdvpgjQsvgIcon from \"./icons/PlasmicIcon__ReshotIconSettingsWryhdvpgjQsvg\" // plasmic-import: W5Fg7djZ3c/icon\n\nexport const PlasmicMyTimelyne__VariantProps = new Array()\n\nexport const PlasmicMyTimelyne__ArgProps = new Array()\n\nfunction PlasmicMyTimelyne__RenderFunc(props) {\n  const { variants, args, overrides, forNode } = props\n  const $props = props.args\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <div\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_mixins,\n            projectcss.plasmic_tokens,\n            sty.root\n          )}\n        >\n          <Tilt\n            data-plasmic-name={\"tilt\"}\n            data-plasmic-override={overrides.tilt}\n            className={classNames(\"__wab_instance\", sty.tilt)}\n            gyroscope={true}\n            trackOnWindow={true}\n            transitionSpeed={700}\n          >\n            {true ? (\n              <Button\n                data-plasmic-name={\"button\"}\n                data-plasmic-override={overrides.button}\n                className={classNames(\"__wab_instance\", sty.button)}\n                color={\"blue\"}\n                link={\"/settings\"}\n                size={\"minimal\"}\n              >\n                <ReshotIconSettingsWryhdvpgjQsvgIcon\n                  data-plasmic-name={\"svg\"}\n                  data-plasmic-override={overrides.svg}\n                  className={classNames(projectcss.all, sty.svg)}\n                  role={\"img\"}\n                />\n              </Button>\n            ) : null}\n          </Tilt>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"tilt\", \"button\", \"svg\"],\n  tilt: [\"tilt\", \"button\", \"svg\"],\n  button: [\"button\", \"svg\"],\n  svg: [\"svg\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicMyTimelyne__ArgProps,\n      internalVariantPropNames: PlasmicMyTimelyne__VariantProps,\n    })\n\n    return PlasmicMyTimelyne__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicMyTimelyne\"\n  } else {\n    func.displayName = `PlasmicMyTimelyne.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicMyTimelyne = Object.assign(\n  // Top-level PlasmicMyTimelyne renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    tilt: makeNodeComponent(\"tilt\"),\n    button: makeNodeComponent(\"button\"),\n    svg: makeNodeComponent(\"svg\"),\n    // Metadata about props expected for PlasmicMyTimelyne\n    internalVariantProps: PlasmicMyTimelyne__VariantProps,\n    internalArgProps: PlasmicMyTimelyne__ArgProps,\n  }\n)\n\nexport default PlasmicMyTimelyne\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var button = \"PlasmicMyTimelyne-module--button--MbeNF\";\nexport var root = \"PlasmicMyTimelyne-module--root--LVkwG\";\nexport var svg = \"PlasmicMyTimelyne-module--svg--vV5yn\";\nexport var svg__jr4Fb = \"PlasmicMyTimelyne-module--svg__jr4Fb--veFMx\";\nexport var svg__u0CiO = \"PlasmicMyTimelyne-module--svg__u0CiO--yjzJR\";\nexport var tilt = \"PlasmicMyTimelyne-module--tilt--2E6kC\";","// This is a skeleton starter React page generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport GlobalContextsProvider from \"../components/plasmic/timelyne/PlasmicGlobalContextsProvider\"\nimport { PlasmicMyTimelyne } from \"../components/plasmic/timelyne/PlasmicMyTimelyne\"\n\nfunction MyTimelyne() {\n  // Use PlasmicMyTimelyne to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicMyTimelyne are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, PlasmicMyTimelyne is wrapped by your project's global\n  // variant context providers. These wrappers may be moved to\n  // Gatsby \"wrapRootElement\" function\n  // (https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr#wrapRootElement).\n  return (\n    <GlobalContextsProvider>\n      <PlasmicMyTimelyne />\n    </GlobalContextsProvider>\n  )\n}\n\nexport default MyTimelyne\n"],"names":["PlasmicMyTimelyne__VariantProps","Array","PlasmicMyTimelyne__ArgProps","PlasmicDescendants","root","tilt","button","svg","makeNodeComponent","nodeName","func","props","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","className","projectcss","classNames","gyroscope","trackOnWindow","transitionSpeed","Button","color","link","size","role","PlasmicMyTimelyne__RenderFunc","displayName","PlasmicMyTimelyne","Object","assign","internalVariantProps","internalArgProps"],"sourceRoot":""}